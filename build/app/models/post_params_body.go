// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostParamsBody post params body
//
// swagger:model postParamsBody
type PostParamsBody struct {

	// API-Key for Twitter developer account
	// Required: true
	Accesstoken *string `json:"accesstoken"`

	// API-Secret for Twitter developer account
	// Required: true
	Accesstokensecret *string `json:"accesstokensecret"`

	// Post a tweet or search tweets with `query`
	// Required: true
	// Enum: [search tweet]
	Action *string `json:"action"`

	// API-Key for Twitter developer account
	// Required: true
	Apikey *string `json:"apikey"`

	// API-Secret for Twitter developer account
	// Required: true
	Apisecret *string `json:"apisecret"`

	// content
	Content string `json:"content,omitempty"`

	// query
	Query *PostParamsBodyQuery `json:"query,omitempty"`
}

// Validate validates this post params body
func (m *PostParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccesstoken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccesstokensecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApikey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApisecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostParamsBody) validateAccesstoken(formats strfmt.Registry) error {

	if err := validate.Required("accesstoken", "body", m.Accesstoken); err != nil {
		return err
	}

	return nil
}

func (m *PostParamsBody) validateAccesstokensecret(formats strfmt.Registry) error {

	if err := validate.Required("accesstokensecret", "body", m.Accesstokensecret); err != nil {
		return err
	}

	return nil
}

var postParamsBodyTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["search","tweet"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postParamsBodyTypeActionPropEnum = append(postParamsBodyTypeActionPropEnum, v)
	}
}

const (

	// PostParamsBodyActionSearch captures enum value "search"
	PostParamsBodyActionSearch string = "search"

	// PostParamsBodyActionTweet captures enum value "tweet"
	PostParamsBodyActionTweet string = "tweet"
)

// prop value enum
func (m *PostParamsBody) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postParamsBodyTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PostParamsBody) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *PostParamsBody) validateApikey(formats strfmt.Registry) error {

	if err := validate.Required("apikey", "body", m.Apikey); err != nil {
		return err
	}

	return nil
}

func (m *PostParamsBody) validateApisecret(formats strfmt.Registry) error {

	if err := validate.Required("apisecret", "body", m.Apisecret); err != nil {
		return err
	}

	return nil
}

func (m *PostParamsBody) validateQuery(formats strfmt.Registry) error {
	if swag.IsZero(m.Query) { // not required
		return nil
	}

	if m.Query != nil {
		if err := m.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post params body based on the context it is used
func (m *PostParamsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostParamsBody) contextValidateQuery(ctx context.Context, formats strfmt.Registry) error {

	if m.Query != nil {
		if err := m.Query.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostParamsBody) UnmarshalBinary(b []byte) error {
	var res PostParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
